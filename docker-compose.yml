networks:
  my-network:
    driver: bridge

services:
  log:
    container_name: elk
    build: ./ELK-log/
    ports:
      - "5601:5601"
      - "9200:9200"
      - "5044:5044"
      - "7777:7777/udp"
    networks:
      - my-network
  db:
    container_name: database
    image: postgres
    labels:
      - com.host.description=label
    ports:
      - '${DB_PORT_HOST}:${DB_PORT}'
    volumes:
      - data:/data/db
      - ./database/initialization.sh:/docker-entrypoint-initdb.d/initialization.sh
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USERNAME}
    networks:
      - my-network
  main-proxy:
    container_name: mainproxy
    ports:
      - "8000:8000"
    build: ./main-proxy
    depends_on:
      - mobile-bff
      - desktop-bff
    networks:
      - my-network
  service-proxy:
    container_name: serviceproxy
    ports:
      - "8100:8100"
    build: ./service-proxy
    depends_on:
      - main-proxy
      - auth-server
      - api-server
    networks:
      - my-network
  mobile-bff:
    container_name: mobilebff
    build:
      context: ./mobile-bff
      args:
        - PORT=${MOBILE_BFF_PORT}
    ports:
      - "${MOBILE_BFF_PORT}:${MOBILE_BFF_PORT}"
    env_file:
      - .env
    networks:
      - my-network
  desktop-bff:
    container_name: desktopbff
    build:
      context: ./desktop-bff
      args:
        - PORT=${DESKTOP_BFF_PORT}
    ports:
      - "${DESKTOP_BFF_PORT}:${DESKTOP_BFF_PORT}"
    env_file:
      - .env
    networks:
      - my-network
  auth-server:
    container_name: authserver
    build:
      context: ./auth-server
      args:
        - PORT=${AUTH_SERVER_PORT}
    ports:
      - "${AUTH_SERVER_PORT}:${AUTH_SERVER_PORT}"
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - my-network
  api-server:
    container_name: apiserver
    build:
      context: ./api-server
      args:
        - PORT=${API_SERVER_PORT}
    ports:
      - "${API_SERVER_PORT}:${API_SERVER_PORT}"
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - my-network
volumes:
  data: { }